version: 2.1

references:
  working_dir: &working_dir /tmp/workspace/farmsmart

  workspace: &workspace /tmp/workspace

  restore_workspace: &restore_workspace
    attach_workspace:
      at: *workspace

  save_workspace: &save_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - farmsmart

executors:
  gcp-firebase:
    docker:
      - image: farmsmart/gcp-firebase
    working_directory: *working_dir
  flutter:
    docker:
      - image: cirrusci/flutter:v1.7.8-hotfix.3
    working_directory: *working_dir
  utilities:
    docker:
      - image: farmsmart/utilities
    working_directory: *working_dir

jobs:
  prepare:
    executor: gcp-firebase
    steps:
      - checkout
      - run:
          name: "Decrypt sensitive files"
          command: | 
            set -euo pipefail
            SECRETS_DIR=./creds
            mkdir -p ${SECRETS_DIR}
            echo ${KMS_ACCOUNT} | base64 -di | tee ${SECRETS_DIR}/service-account.json | gcloud auth activate-service-account --key-file=-
            export GOOGLE_APPLICATION_CREDENTIALS=${SECRETS_DIR}/service-account.json
            /farmsmart/sops/sops-decrypt.sh
      - *save_workspace

  test:
    executor: flutter
    steps:
      - *restore_workspace
      - run:
          name: Check flutter status
          command: flutter doctor
      - run:
          name: Install JUnitReport
          command: pub global activate junitreport
      - run:
          name: Create directory structure for test-results
          command: mkdir --parents /tmp/test-results/flutter
      - run:
          name: Get Flutter packages to avoid stdout in JSON
          command: flutter packages get
      - run:
          name: Run Flutter tests.
          command: flutter test --machine > /tmp/test-results/flutter/TEST-report.json
      - run:
          name: Convert Flutter tests to JUnit
          command: $HOME/.pub-cache/bin/tojunit --input /tmp/test-results/flutter/TEST-report.json --output /tmp/test-results/flutter/junit.xml
          when: always
      - store_test_results:
          path: /tmp/test-results
      - *save_workspace

  get-next-version:
    executor: utilities
    steps:
      - *restore_workspace
      - run: |
          VERSION=$(echo $CIRCLE_BRANCH | sed 's/.*\/v\(.*\)/\1/')
          VERSION_INFO=$(python3 ./ci/playstore/increment_version.py co.farmsmart.app ${VERSION} ${TRACK})
          VERSION_CODE=$(echo ${VERSION_INFO} | jq '.version_code')
          echo "export VERSION_NAME=${VERSION}" >> ./env.sh
          echo "export VERSION_CODE=${VERSION_CODE}" >> ./env.sh
      - *save_workspace

  flutter-build-dev:
    executor: flutter
    steps:
      - *restore_workspace
      - run: |
          flutter doctor -v
          flutter pub get
      - run: |
          set -euo pipefail
          VERSION_NAME="${CIRCLE_BRANCH}_${CIRCLE_SHA1:0:7}"
          echo "Building flutter development appbundle - BUILD_NAME:${VERSION_NAME}"
          flutter build appbundle --build-name="${CIRCLE_SHA1}" --target-platform android-arm,android-arm64 --release --flavor qa -t lib/main.dart
          APK_BUILD_PATH=$(find ./build -name '*.aab')
          echo "export APK_BUILD_PATH=${APK_BUILD_PATH}" >> ./env.sh
          echo "export VERSION_NAME=${VERSION_NAME}" >> ./env.sh
      - *save_workspace

  flutter-build-rc:
    executor: flutter
    steps:
      - *restore_workspace
      - run: |
          flutter pub get
          VERSION_NAME="RC_${CIRCLE_TAG}_${CIRCLE_SHA1:0:7}"
          echo "Building flutter development apk - BUILD_NAME:${VERSION_NAME}"
          flutter build appbundle --build-name="${VERSION_NAME}" --target-platform android-arm,android-arm64 --release --flavor production -t lib/main_production.dart
          APK_BUILD_PATH=$(find ./build -name '*.aab')
          echo "export APK_BUILD_PATH=${APK_BUILD_PATH}" >> ./env.sh
          echo "export VERSION_NAME=${VERSION_NAME}" >> ./env.sh
      - *save_workspace

  flutter-build-release:
    executor: flutter
    steps:
      - *restore_workspace
      - run: |
          source ./env.sh
          flutter packages get
          echo "Building flutter appbundle - BUILD_NAME:${VERSION_NAME}, BUILD_NUMBER=${VERSION_CODE}"
          flutter build apk --build-name=${VERSION_NAME} --build-number=${VERSION_CODE} --release --flavor production -t lib/main_production.dart
          BUILD_PATH=$(find ./build -name '*.aab')
          mkdir -p /tmp/workspace/build
          mv ${BUILD_PATH} /tmp/workspace/build/${VERSION_NAME}.aab
      - persist_to_workspace:
          root: *workspace
          paths:
            - build
      - store_artifacts:
          path: /tmp/workspace/build

  upload-to-app-sharing:
    executor: utilities
    steps:
      - *restore_workspace
      - run: |
          set -euo pipefail
          source ./env.sh
          APK_INFO=$(python3 ./ci/playstore/publish_to_internal_app_sharing.py co.farmsmart.app ${VERSION_NAME} ${APK_BUILD_PATH})
          echo "export APK_INFO='${APK_INFO}'" >> ./env.sh
      - *save_workspace

  promote-apk-to-track:
    executor: utilities
    steps:
      - *restore_workspace
      - run: |
          set -euo pipefail
          source ./env.sh
          APK_PATHS=$(find /tmp/workspace -name "*${VERSION_NAME}*.aab" | sed 'H;1h;$!d;x;y/\n/,/')
          python3 ./ci/playstore/promote_apk_to_track.py co.farmsmart.app ${TRACK} ${VERSION_NAME} ${VERSION_CODE} ./Release_notes ${APK_PATHS}
      - *save_workspace

  slack-notification-prod:
    executor: utilities
    steps:
      - *restore_workspace
      - run: |
          set -euo pipefail
          source ./env.sh
          MESSAGE="Release version v${VERSION_NAME} is now available on the ${TRACK} track! - ${TRACK_URL}"
          python3 /farmsmart/utilities/notify.py ${SLACK_FARMSMART_TOKEN} "${MESSAGE}" ${SLACK_CHANNEL}

  slack-notification-dev:
    executor: utilities
    steps:
      - *restore_workspace
      - run: |
          set -euo pipefail
          source ./env.sh
          VERSION_NAME=$(echo ${APK_INFO} | jq '.version_name')
          DOWNLOAD_URL=$(echo ${APK_INFO} | jq '.download_url')
          MESSAGE="Test version ${VERSION_NAME} has been uploaded to internal app sharing - ${DOWNLOAD_URL}"
          python3 /farmsmart/utilities/notify.py ${SLACK_FARMSMART_TOKEN} "${MESSAGE}" ${SLACK_CHANNEL}

workflows:
  android-apk:
    jobs:
      - prepare:
          context: gcp-kms
          filters:
            tags:
              only: /.*/

      - test:
          requires:
            - prepare
          filters:
            tags:
              only: /.*/  


      # - flutter-build-dev:
      #     requires:
      #       - test
      #     context: dev
      #     filters:
      #       branches:
      #         only: /develop|feature.*/
      
      # - flutter-build-rc:
      #     requires:
      #       - test
      #     context: dev
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /.*/

      # - upload-to-app-sharing:
      #     requires:
      #       - flutter-build-dev
      #     context: dev
      #     filters:
      #       branches:
      #         only: /develop|feature.*/

      # - upload-to-app-sharing:
      #     name: upload-to-app-sharing-rc
      #     requires:
      #       - flutter-build-rc
      #     context: dev
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /.*/

      # - slack-notification-dev:
      #     requires:
      #       - upload-to-app-sharing
      #     context: dev
      #     filters:
      #       branches:
      #         only: /develop|feature.*/

      # - slack-notification-dev:
      #     name: slack-notification-dev-rc
      #     requires:
      #       - upload-to-app-sharing-rc
      #     context: dev
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /.*/

      # prod
      - get-next-version:
          requires:
            - test
          context: prod
          filters:
            branches:
              only: /feature.*/

      - flutter-build-release:
          requires:
            - get-next-version
          context: prod

      - promote-apk-to-track:
          requires:
            - flutter-build-release
          context: prod

      - slack-notification-prod:
          requires:
            - promote-apk-to-track
          context: prod
